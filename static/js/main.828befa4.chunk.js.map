{"version":3,"sources":["reducers/todos.js","actions/actionTypes.js","reducers/filter.js","reducers/text.js","reducers/index.js","actions/index.js","component/AddTodo.js","selectors/index.js","containers/AddTodoContainer.js","component/Todo.js","component/TodoList.js","containers/TodoListContainer.js","component/Footer.js","containers/FooterContainer.js","component/App.js","middlewares/logger.js","enhancers/logger.js","theme.js","index.js"],"names":["initialState","isFetching","error","data","todos","state","action","type","id","text","completed","map","todo","reducer","filter","combineReducers","nextTodoId","AddTodo","handleChange","e","props","setTodoText","target","value","handleClick","addTodo","console","log","Container","Box","marginTop","justifyContent","Typography","component","color","Grid","container","direction","justify","alignItems","spacing","item","xs","TextField","label","placeholder","multiline","size","variant","autoFocus","fullWidth","rows","margin","this","onChange","Button","onClick","startIcon","Component","getText","getFilter","getVisibleTodos","t","Error","connect","dispatch","Todo","CardContent","style","textDecoration","TodoList","fetchTodos","toggleTodo","key","fetch","then","response","json","fetchTodosSuccess","fetchTodosFailure","Footer","setVisibilityFilter","setFilter","marginBottom","disabled","useStyles","makeStyles","card","borderRadius","transition","width","overflow","title","fontSize","fontWeight","textAlign","blue","A200","content","overflowX","button","textAligh","App","classes","cardHeaderShadowStyles","useFadedShadowStyles","cardHeaderStyles","useContainedCardHeaderStyles","useSoftRiseShadowStyles","inactive","display","Card","className","CardHeader","root","subheader","AddTodoContainer","TodoListContainer","FooterContainer","red","A400","logger","getState","next","group","result","groupEnd","createStore","store","theme","createMuiTheme","typography","fontFamily","palette","primary","main","secondary","pink","warning","orange","success","green","background","default","indigo","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","applyMiddleware","thunkMiddleware","loggerMiddleware","loggerEnhancer","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.828befa4.chunk.js","sourcesContent":["import { ADD_TODO, TOGGLE_TODO, FETCH_TODOS_REQUEST,\r\nFETCH_TODOS_SUCCESS, FETCH_TODOS_FAILURE } from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    error: null,\r\n    data: []\r\n}\r\n\r\n// modified reducer func for async actions\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_TODOS_REQUEST:\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            }\r\n        case FETCH_TODOS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                data: action.data\r\n            }\r\n        case FETCH_TODOS_FAILURE:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return {\r\n                ...state,\r\n                data: todos(state.data, action)  // invoke child reducer todos here\r\n            }\r\n    }\r\n}\r\n\r\nconst todos = (state = [], action) => {\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: action.id,\r\n                    text: action.text,\r\n                    completed: false\r\n                }\r\n            ]\r\n            // return {\r\n            //     ...state,\r\n            //     todos: [\r\n            //         ...state.todos,\r\n            //         {\r\n            //             id: action.id,\r\n            //             text: action.text,\r\n            //             completed: false\r\n            //         }\r\n            //     ]\r\n            // }\r\n        case TOGGLE_TODO:\r\n            return state.map( todo =>\r\n                (todo.id === action.id) \r\n                    ? {...todo, completed: !todo.completed}\r\n                    : todo\r\n                )\r\n            // return {\r\n            //     ...state,\r\n            //     todos: state.todos.map(todo => {\r\n            //         todo.id === action.id \r\n            //         ? {...todo, completed: !todo.completed}\r\n            //         : todo\r\n            //     })\r\n            // }\r\n        default:\r\n            return state\r\n        }\r\n}\r\n\r\nexport default reducer;","export const ADD_TODO = 'ADD_TODO'\r\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\r\nexport const SET_FILTER = 'SET_FILTER'\r\nexport const SET_TODO_TEXT = 'SET_TODO_TEXT'\r\nexport const FETCH_TODOS_REQUEST = 'FETCH_TODOS_REQUEST'\r\nexport const FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS'\r\nexport const FETCH_TODOS_FAILURE = 'FETCH_TODOS_FAILURE'","import { SET_FILTER } from '../actions/actionTypes';\r\n\r\nconst filter = (state = 'all', action) => {\r\n    switch (action.type) {\r\n        case SET_FILTER:\r\n            return action.filter\r\n            // return {\r\n            //     ...state,\r\n            //     filter: action.filter\r\n            // }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default filter","import { SET_TODO_TEXT } from '../actions/actionTypes'\r\n\r\nconst text = (state = '', action) => {\r\n    switch (action.type) {\r\n        case SET_TODO_TEXT:\r\n            return action.text\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default text","import { combineReducers } from 'redux'\r\nimport todos from './todos'\r\nimport filter from './filter'\r\nimport text from './text'\r\n\r\nexport default combineReducers({\r\n    todos,\r\n    text,\r\n    filter\r\n})","import { ADD_TODO, TOGGLE_TODO, SET_FILTER, SET_TODO_TEXT, \r\n    FETCH_TODOS_REQUEST, FETCH_TODOS_SUCCESS, FETCH_TODOS_FAILURE } from './actionTypes'\r\n\r\nlet nextTodoId = 0\r\n\r\n// sync actions\r\nconst fetchTodosRequest = () => ({\r\n    type: FETCH_TODOS_REQUEST\r\n})\r\n\r\nconst fetchTodosSuccess = (data) => ({\r\n    type: FETCH_TODOS_SUCCESS,\r\n    data // todo list data\r\n})\r\n\r\nconst fetchTodosFailure = (error) => ({\r\n    type: FETCH_TODOS_FAILURE,\r\n    error\r\n})\r\n\r\n// invoke an async action\r\nexport const fetchTodos = () => {\r\n    return (dispatch) => { // return a function, need a middleware(redux-thunk)\r\n        dispatch(fetchTodosRequest());\r\n        return fetch('.\\\\mock\\\\initial_todos.json').then( // This is how to access file in public\r\n            response => {\r\n                response.json().then(data => {\r\n                    dispatch(fetchTodosSuccess(data));\r\n                })\r\n            },\r\n            error => {\r\n                dispatch(fetchTodosFailure(error));\r\n                console.log(\"Tell Wendy an error occurred: \\n\"+ error);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * addTodo\r\n * @param {*} text \r\n */\r\nexport const addTodo = (text) => ({\r\n    type: ADD_TODO,\r\n    id: nextTodoId++,\r\n    text\r\n})\r\n\r\n/**\r\n * toggleTodo\r\n * @param {*} id \r\n */\r\nexport const toggleTodo = id => ({\r\n    type: TOGGLE_TODO,\r\n    id\r\n})\r\n\r\n/**\r\n * setFilter\r\n * @param {*} filter \r\n */\r\nexport const setFilter = filter => ({\r\n    type: SET_FILTER,\r\n    filter\r\n})\r\n\r\n/**\r\n * setTodoText\r\n * @param {*} text \r\n */\r\nexport const setTodoText = text => ({\r\n    type: SET_TODO_TEXT,\r\n    text\r\n})","import React, { Component } from 'react';\r\nimport { Container, Box, Button, Grid, Typography } from '@material-ui/core'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport AddBoxIcon from '@material-ui/icons/AddBox'\r\n\r\nclass AddTodo extends Component {\r\n// const AddTodo = () => {\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         text: '',\r\n    //     }\r\n    // }\r\n\r\n    // render() {\r\n    //     return (\r\n    //         <div>\r\n    //             <input value={this.state.text} \r\n    //                 onChange={this.handleChange} \r\n    //                 />\r\n    //             <button \r\n    //                 onClick={this.handleClick}\r\n    //                 >Add</button>\r\n    //         </div>\r\n    //     );\r\n    // }\r\n\r\n    // handleChange = (e) => {\r\n    //     this.setState({\r\n    //         text: e.target.value,\r\n    //     })\r\n    // }\r\n\r\n    // handleClick = () => {\r\n    //     this.props.addTodo(this.state.text);\r\n    //     this.setState({\r\n    //         text: '',\r\n    //     })\r\n    // }\r\n    // const classes = useStyles();\r\n    render() {\r\n        return (\r\n            <Container>\r\n            <Box \r\n                // display=\"flex\"\r\n                marginTop={5}\r\n                // marginLeft={5}\r\n                // marginRight={5}\r\n                justifyContent=\"center\"\r\n            >\r\n            <Typography component={'span'} color=\"primary\">\r\n                <Grid \r\n                    container \r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={3}\r\n                    >\r\n                    <Grid item xs={8}>\r\n                        {/* <FormRow /> */}\r\n                    <TextField\r\n                        id=\"outlined-textarea\"\r\n                        label=\"ENTER NEXT ITEM\"\r\n                        placeholder='Press \"Enter\" for multi-line input'\r\n                        multiline\r\n                        size=\"medium\"\r\n                        variant=\"outlined\"\r\n                        autoFocus\r\n                        fullWidth\r\n                        // width=\"80%\"\r\n                        rows={2}\r\n                        margin=\"normal\"\r\n                        value={this.props.text}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    </Grid>\r\n                    {/* <input value={this.props.text} onChange={this.handleChange} /> */}\r\n                    {/* <button \r\n                        onClick={this.handleClick}\r\n                        >Add</button> */}\r\n                    <Grid item xs={2}>\r\n                    <Button \r\n                        variant=\"outlined\"\r\n                        onClick={this.handleClick}\r\n                        startIcon={<AddBoxIcon />}\r\n                        color=\"primary\"\r\n                        >\r\n                            Add\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Typography>\r\n            </Box>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.props.setTodoText(e.target.value)\r\n    }\r\n\r\n    handleClick = () => {\r\n        if (this.props.text !== \"\") {\r\n            this.props.addTodo(this.props.text)\r\n            this.props.setTodoText(\"\") // clear the content after input\r\n        } else {\r\n            console.log(\"Tell user the textfield is empty!\");\r\n        }\r\n    }\r\n}\r\n\r\nexport default AddTodo;","// used in AddTodoContainer\r\nexport const getText = (state) => state.text\r\n\r\n// used in TodoListContainer / Footer Container\r\nexport const getFilter = (state) => state.filter\r\n\r\n// used in TodoListContainer\r\nexport const getVisibleTodos = (state) => {\r\n    const { todos: {data}, filter } = state\r\n    switch (filter) {\r\n        case 'all':\r\n            return data\r\n        case 'completed':\r\n            return data.filter(t => t.completed)\r\n        case 'active':\r\n            return data.filter(t => !t.completed)\r\n        default:\r\n            return new Error('Unknown filter: ' + filter)\r\n    }\r\n}","import { connect } from 'react-redux'\r\nimport { setTodoText, addTodo } from '../actions'\r\nimport AddTodo from '../component/AddTodo'\r\nimport { getText } from \"../selectors\"\r\n\r\nconst mapStateToProps = state => ({\r\n    // text: state.text\r\n    text: getText(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setTodoText: text => dispatch (setTodoText(text)),\r\n    addTodo: text => dispatch(addTodo(text))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddTodo)","import React, { Component } from 'react';\r\nimport { CardContent, Grid, Container } from '@material-ui/core';\r\n\r\nclass Todo extends Component {\r\n    render() {\r\n        const {completed, text, onClick } = this.props;\r\n        return (\r\n            <Container>\r\n            <CardContent>\r\n                <Grid>\r\n                    <li\r\n                        onClick={onClick}\r\n                        style={{\r\n                            textDecoration: completed ? \"line-through\" : \"none\"\r\n                    }}\r\n                    >\r\n                        {text}\r\n                    </li>\r\n                </Grid>\r\n            </CardContent>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport Todo from \"./Todo\";\r\nimport { CardContent, Container } from '@material-ui/core'\r\n\r\nclass TodoList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchTodos();\r\n    }\r\n\r\n    render() {\r\n        const {todos, toggleTodo} = this.props;\r\n        return (\r\n            <Container>\r\n                <CardContent>\r\n                    <ul>\r\n                        {\r\n                            todos.map(todo => {\r\n                            // return <li> {todo.text} </li>\r\n                            return <Todo key={todo.id} {...todo} \r\n                                onClick={() => {toggleTodo(todo.id)}} />\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </CardContent>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;","import { connect } from 'react-redux'\r\nimport TodoList from '../component/TodoList'\r\nimport { toggleTodo, fetchTodos } from '../actions'\r\nimport { getVisibleTodos } from \"../selectors\"\r\n\r\n// const getVisibleTodos = (todos, filter) => {\r\n//     switch (filter) {\r\n//         case 'all':\r\n//             return todos\r\n//         case 'completed':\r\n//             return todos.filter(t => t.completed)\r\n//         case 'active':\r\n//             return todos.filter(t => !t.completed)\r\n//         default:\r\n//             return new Error('Unknown filter: ' + filter)\r\n//     }\r\n// }\r\n\r\nconst mapStateToProps = (state) => ({\r\n    // todos: getVisibleTodos(state.todos.data, state.filter)\r\n    todos: getVisibleTodos(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleTodo: id => dispatch(toggleTodo(id)),\r\n    fetchTodos: () => dispatch(fetchTodos())\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TodoList);","import React, { Component } from 'react';\r\nimport { Container, Box, Button, Grid } from '@material-ui/core'\r\n// import filter from \"../App\";\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        const { filter, setFilter: setVisibilityFilter } = this.props;\r\n        // So here's a smart trick:\r\n        // renamed setVisibilityFilter to setFilter in order to keep the original func name below\r\n        return (\r\n        <Container>\r\n            <Box \r\n                // display=\"flex\" \r\n                marginBottom={10}\r\n                alignItems=\"center\" \r\n                justifyContent=\"center\"\r\n                >\r\n                <Grid \r\n                    container \r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    >\r\n                    <Grid item>\r\n                        <Button disabled={filter === \"all\"}\r\n                            onClick={\r\n                                () => setVisibilityFilter(\"all\")\r\n                            }\r\n                            color=\"primary\"\r\n                            variant=\"outlined\"\r\n                        >\r\n                            All\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button disabled={filter === \"active\"}\r\n                            onClick={\r\n                                () => setVisibilityFilter(\"active\")\r\n                            }\r\n                            color=\"primary\"\r\n                            variant=\"outlined\"\r\n                        >\r\n                            Active\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button disabled={filter === \"completed\"}\r\n                            onClick={\r\n                                () => setVisibilityFilter(\"completed\")\r\n                            }\r\n                            color=\"primary\"\r\n                            variant=\"outlined\"\r\n                        >\r\n                            Completed\r\n                        </Button>\r\n                    </Grid>\r\n\r\n                    {/* <button disabled={filter === \"all\"}\r\n                        onClick={\r\n                            () => setVisibilityFilter(\"all\")\r\n                        }\r\n                    >All</button>\r\n                    <button disabled={filter === \"active\"}\r\n                        onClick={\r\n                            () => setVisibilityFilter(\"active\")\r\n                        }\r\n                    >Active</button>\r\n                    <button disabled={filter === \"completed\"}\r\n                        onClick={\r\n                            () => setVisibilityFilter(\"completed\")\r\n                        }\r\n                    >Completed</button> */}\r\n                </Grid>\r\n            </Box> \r\n        </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import { connect } from 'react-redux'\r\nimport { setFilter } from '../actions'\r\nimport Footer from '../component/Footer'\r\nimport { getFilter } from \"../selectors\"\r\n\r\nconst mapStateToProps = state => ({\r\n    // filter: state.filter\r\n    filter: getFilter(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setFilter: filter  => dispatch (setFilter(filter))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Footer)","import React, { Component } from 'react'\r\n// import AddTodo from \"./component/AddTodo\";\r\n// import TodoList from \"./component/TodoList\";\r\n// import Footer from \"./component/Footer\";\r\nimport AddTodoContainer from '../containers/AddTodoContainer'\r\nimport TodoListContainer from '../containers/TodoListContainer'\r\nimport FooterContainer from '../containers/FooterContainer'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Container, Box, Card, CardContent, Typography } from '@material-ui/core'\r\nimport Favorite from '@material-ui/icons/Favorite'\r\nimport red from '@material-ui/core/colors/red'\r\nimport { blue } from '@material-ui/core/colors'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport { useContainedCardHeaderStyles } from '@mui-treasury/styles/cardHeader/contained'\r\nimport { useFadedShadowStyles } from '@mui-treasury/styles/shadow/faded'\r\nimport { useSoftRiseShadowStyles } from '@mui-treasury/styles/shadow/softRise'\r\n\r\n// const todos = [\r\n//     {\r\n//         id: 1,\r\n//         text: \"Walk the dogs\",\r\n//         completed: true\r\n//     },\r\n//     {\r\n//         id: 2,\r\n//         text: \"Buy grocery\",\r\n//         completed: false\r\n//     },\r\n//     {\r\n//         id: 3,\r\n//         text: \"Cook dinner\",\r\n//         completed: true\r\n//     },\r\n// ]\r\n\r\n// const filter = \"all\";\r\n\r\nconst useStyles = makeStyles( ({spacing}) => ({\r\n    card: {\r\n        marginTop: 50,\r\n        marginBottom: 30,\r\n        borderRadius: spacing(0.5),\r\n        transition: '0.3s',\r\n        width: '90%',\r\n        overflow: 'initial',\r\n    },\r\n    title: {\r\n        fontSize: 25,\r\n        fontWeight: 800,\r\n        textAlign: 'center',\r\n        color: blue.A200,\r\n        // fontFamily: \"'Arial', sans-serif\",\r\n    },\r\n    content: {\r\n        textAlign: 'center',\r\n        overflowX: 'auto',\r\n    },\r\n    button: {\r\n        textAligh: 'center',\r\n    }\r\n}));\r\n\r\n\r\n\r\nconst App = () => {\r\n// class App extends Component {\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         todos: [],\r\n    //         filter: 'all'\r\n    //     }\r\n    //     this.nextTodoId = 0;\r\n    // }\r\n\r\n    // render() {\r\n        // const todos = this.getVisibleTodos();\r\n        // const {filter} = this.props;\r\n        const classes = useStyles();\r\n        const cardHeaderShadowStyles = useFadedShadowStyles();\r\n        const cardHeaderStyles = useContainedCardHeaderStyles();\r\n        const cardShadowStyles = useSoftRiseShadowStyles({ inactive: true });\r\n        return (\r\n            <Container> {/**material-ui container */}\r\n            <Box \r\n                 display=\"flex\"\r\n                 marginTop={5}\r\n                 alignItems=\"center\"\r\n                 justifyContent=\"center\"\r\n                 >\r\n                <Card className={classes.card}>\r\n                <Typography component={'span'}>\r\n                {/* <Card className={classes.card}> */}\r\n                    {/* <CardContent className={classes.title}> */}\r\n                    {/* <CardContent>\r\n                        <Typography component={'span'} color=\"primary\">\r\n                            MY TODO LIST\r\n                        </Typography>\r\n                    </CardContent> */}\r\n                    <Typography component={'span'} color=\"primary\">\r\n                        <CardHeader\r\n                            className={cardHeaderShadowStyles.root}\r\n                            classes={cardHeaderStyles}\r\n                            title={'Change me'}\r\n                            subheader={'My To-Do List App'}\r\n                        />\r\n                    </Typography>\r\n                    <Box display=\"flex\" \r\n                    alignItems=\"center\" \r\n                    justifyContent=\"center\"\r\n                    >\r\n\r\n                        <AddTodoContainer />\r\n\r\n                    </Box>\r\n                    <Box display=\"flex\" \r\n                    alignItems=\"center\" \r\n                    justifyContent=\"center\" \r\n                    >\r\n                        <Typography component={'span'}>\r\n                            <CardContent>\r\n\r\n                                <TodoListContainer />\r\n\r\n                            </CardContent>\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box display=\"flex\" \r\n                    alignItems=\"center\" \r\n                    justifyContent=\"center\" \r\n                    >\r\n\r\n                        <FooterContainer />\r\n\r\n                    </Box>\r\n                    {/* <AddTodo addTodo={this.addTodo} />\r\n                    <TodoList todos={todos} toggleTodo={this.toggleTodo} />\r\n                    <Footer filter={filter} setVisibilityFilter={this.setVisibilityFilter} /> */}\r\n                    <Box  display=\"flex\" \r\n                    alignItems=\"center\" \r\n                    justifyContent=\"right\" \r\n                    >\r\n                        <CardContent>\r\n                            Made by Wendy with \r\n                            <Favorite\r\n                                style={{ color: red.A400 }}\r\n                            ></Favorite>\r\n                        </CardContent>\r\n                    </Box>\r\n                </Typography>\r\n                </Card>\r\n            </Box>\r\n            \r\n            </Container>\r\n        );\r\n    // }\r\n\r\n    // // filter todos according to conditions given\r\n    // getVisibleTodos = () => {\r\n    //     const currentFilter = this.state.filter;\r\n    //     return this.state.todos.filter(item => {\r\n    //         if (currentFilter === \"active\") {\r\n    //             return !item.completed;\r\n    //         } else if (currentFilter === \"completed\") {\r\n    //             return item.completed;\r\n    //         } else {\r\n    //             return true;\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    // // add a new todo element\r\n    // addTodo = (text) => {\r\n    //     const todo = {\r\n    //         id: this.nextTodoId++,\r\n    //         text,\r\n    //         complete: false\r\n    //     };\r\n    //     const newTodos = [todo, ...this.state.todos];\r\n    //     this.setState ({\r\n    //         todos: newTodos\r\n    //     });\r\n    // }\r\n\r\n    // // update todo\r\n    // toggleTodo = id => {\r\n    //     const newTodos = this.state.todos.map(item => {\r\n    //         return item.id === id \r\n    //             ? {...item, completed : !item.completed } \r\n    //             : item\r\n    //     });\r\n    //     this.setState ({\r\n    //         todos: newTodos\r\n    //     })\r\n    // }\r\n\r\n    // setVisibilityFilter = filter => {\r\n    //     this.setState({\r\n    //         filter\r\n    //     })\r\n    // }\r\n}\r\n\r\nexport default App;","/**\r\n * print action and state\r\n */\r\nconst logger = ({ getState, dispatch }) => next => action => {\r\n    console.group(action.type); //分组\r\n    console.log(\"dispatching: \", action);\r\n    const result = next(action);\r\n    console.log(\"next state: \", getState());\r\n    console.groupEnd();\r\n    return result;\r\n}\r\n\r\nexport default logger;","// args = reducer & initialState & ...\r\n\r\nconst logger = createStore => (...args) => { \r\n    const store = createStore(...args);\r\n    const dispatch = (action) => {\r\n        console.group(action.type); //categorize by action.type\r\n        console.log(\"dispatching: \", action);\r\n        const result = store.dispatch(action);\r\n        console.log(\"next state: \", store.getState());\r\n        return result;\r\n    }\r\n    return {...store, dispatch}\r\n}\r\n\r\nexport default logger;","import { createMuiTheme } from '@material-ui/core/styles'\r\nimport { blue, red, indigo, pink, orange, green } from '@material-ui/core/colors'\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        fontFamily: \"Arial\",\r\n        fontSize: 12,\r\n        fontWeight: 800,\r\n        // card: {\r\n        //     fontSize: '2rem',\r\n        //     fontWeight: 800,\r\n        //     marginTop: 50,\r\n        // },\r\n        button: {\r\n            fontSize: 14,\r\n            fontWeight: 600,\r\n        },\r\n        // textfield: {\r\n        //     fontSize: 10,\r\n        //     fontWeight: 500,\r\n        // }\r\n    },\r\n    palette: {\r\n        primary: {\r\n            main: blue[800],\r\n        },\r\n        secondary: pink,\r\n        error: {\r\n            main: red[300],\r\n        },\r\n        warning: orange,\r\n        success: green,\r\n        background: {\r\n            default: indigo[50],\r\n        },\r\n    },\r\n\r\n    // spreadThis: {\r\n    //     customError: {\r\n    //         color: \"red\",\r\n    //         fontSize: \"0.8rem\",\r\n    //         marginTop: 5\r\n    //     },\r\n    // }\r\n})\r\n\r\nexport default theme;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, compose } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport rootReducer from './reducers'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport App from './component/App'\r\nimport loggerMiddleware from './middlewares/logger'\r\nimport loggerEnhancer from \"./enhancers/logger\"\r\nimport { MuiThemeProvider } from '@material-ui/core'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport theme from './theme'\r\n// import * as serviceWorker from './serviceWorker';\r\n// import store from './store'\r\n// import './index.css';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, \r\n    composeEnhancers(\r\n        applyMiddleware(thunkMiddleware, loggerMiddleware),\r\n        loggerEnhancer\r\n        ));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <MuiThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <App />\r\n        </MuiThemeProvider>\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}