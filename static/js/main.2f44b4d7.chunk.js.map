{"version":3,"sources":["reducers/todos.js","actions/actionTypes.js","reducers/filter.js","reducers/text.js","reducers/index.js","actions/index.js","component/AddTodo.js","selectors/index.js","containers/AddTodoContainer.js","component/Todo.js","component/TodoList.js","containers/TodoListContainer.js","component/Footer.js","containers/FooterContainer.js","theme.js","component/App.js","middlewares/logger.js","enhancers/logger.js","index.js"],"names":["initialState","isFetching","error","data","todos","state","action","type","id","text","completed","map","todo","reducer","filter","combineReducers","nextTodoId","AddTodo","handleChange","e","props","setTodoText","target","value","handleClick","addTodo","Container","Box","display","alignItems","justifyContent","TextField","label","placeholder","multiline","variant","fullWidth","this","onChange","Button","onClick","startIcon","color","Component","getText","getFilter","getVisibleTodos","t","Error","connect","dispatch","Todo","CardContent","style","textDecoration","TodoList","fetchTodos","toggleTodo","key","fetch","then","response","json","fectchTodosSuccess","fectchTodosFailure","console","log","Footer","setVisibilityFilter","setFilter","disabled","theme","createMuiTheme","typography","fontFamily","card","fontSize","fontWeight","button","palette","primary","main","blue","secondary","pink","red","warning","orange","success","green","background","default","indigo","App","makeStyles","marginTop","transition","width","overflow","title","textAlign","A200","content","overflowX","textAligh","Card","Typography","AddTodoContainer","TodoListContainer","FooterContainer","A400","logger","getState","next","group","result","groupEnd","createStore","store","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","applyMiddleware","thunkMiddleware","loggerMiddleware","loggerEnhancer","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.2f44b4d7.chunk.js","sourcesContent":["import { ADD_TODO, TOGGLE_TODO, FETCH_TODOS_REQUEST,\r\nFETCH_TODOS_SUCCESS, FETCH_TODOS_FAILURE } from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    error: null,\r\n    data: []\r\n}\r\n\r\n// modified reducer func for async actions\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_TODOS_REQUEST:\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            }\r\n        case FETCH_TODOS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                data: action.data\r\n            }\r\n        case FETCH_TODOS_FAILURE:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return {\r\n                ...state,\r\n                data: todos(state.data, action)  // invoke child reducer todos here\r\n            }\r\n    }\r\n}\r\n\r\nconst todos = (state = [], action) => {\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: action.id,\r\n                    text: action.text,\r\n                    completed: false\r\n                }\r\n            ]\r\n            // return {\r\n            //     ...state,\r\n            //     todos: [\r\n            //         ...state.todos,\r\n            //         {\r\n            //             id: action.id,\r\n            //             text: action.text,\r\n            //             completed: false\r\n            //         }\r\n            //     ]\r\n            // }\r\n        case TOGGLE_TODO:\r\n            return state.map( todo =>\r\n                (todo.id === action.id) \r\n                    ? {...todo, completed: !todo.completed}\r\n                    : todo\r\n                )\r\n            // return {\r\n            //     ...state,\r\n            //     todos: state.todos.map(todo => {\r\n            //         todo.id === action.id \r\n            //         ? {...todo, completed: !todo.completed}\r\n            //         : todo\r\n            //     })\r\n            // }\r\n        default:\r\n            return state\r\n        }\r\n}\r\n\r\nexport default reducer;","export const ADD_TODO = 'ADD_TODO'\r\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\r\nexport const SET_FILTER = 'SET_FILTER'\r\nexport const SET_TODO_TEXT = 'SET_TODO_TEXT'\r\nexport const FETCH_TODOS_REQUEST = 'FETCH_TODOS_REQUEST'\r\nexport const FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS'\r\nexport const FETCH_TODOS_FAILURE = 'FETCH_TODOS_FAILURE'","import { SET_FILTER } from '../actions/actionTypes';\r\n\r\nconst filter = (state = 'all', action) => {\r\n    switch (action.type) {\r\n        case SET_FILTER:\r\n            return action.filter\r\n            // return {\r\n            //     ...state,\r\n            //     filter: action.filter\r\n            // }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default filter","import { SET_TODO_TEXT } from '../actions/actionTypes'\r\n\r\nconst text = (state = '', action) => {\r\n    switch (action.type) {\r\n        case SET_TODO_TEXT:\r\n            return action.text\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default text","import { combineReducers } from 'redux'\r\nimport todos from './todos'\r\nimport filter from './filter'\r\nimport text from './text'\r\n\r\nexport default combineReducers({\r\n    todos,\r\n    text,\r\n    filter\r\n})","import { ADD_TODO, TOGGLE_TODO, SET_FILTER, SET_TODO_TEXT, \r\n    FETCH_TODOS_REQUEST, FETCH_TODOS_SUCCESS, FETCH_TODOS_FAILURE } from './actionTypes'\r\n\r\nlet nextTodoId = 0\r\n\r\n// sync actions\r\nconst fectchTodosRequest = () => ({\r\n    type: FETCH_TODOS_REQUEST\r\n})\r\n\r\nconst fectchTodosSuccess = (data) => ({\r\n    type: FETCH_TODOS_SUCCESS,\r\n    data // todo list data\r\n})\r\n\r\nconst fectchTodosFailure = (error) => ({\r\n    type: FETCH_TODOS_FAILURE,\r\n    error\r\n})\r\n\r\n// invoke an async action\r\nexport const fetchTodos = () => {\r\n    return (dispatch) => { // return a function, need a middleware(redux-thunk)\r\n        dispatch(fectchTodosRequest());\r\n        return fetch('./mock/todos.json').then( // This is how to access file in public\r\n            response => {\r\n                response.json().then(data => {\r\n                    dispatch(fectchTodosSuccess(data));\r\n                })\r\n            },\r\n            error => {\r\n                dispatch(fectchTodosFailure(error));\r\n                console.log(\"Tell Wendy an error occurred: \\n\"+ error);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * addTodo\r\n * @param {*} text \r\n */\r\nexport const addTodo = (text) => ({\r\n    type: ADD_TODO,\r\n    id: nextTodoId++,\r\n    text\r\n})\r\n\r\n/**\r\n * toggleTodo\r\n * @param {*} id \r\n */\r\nexport const toggleTodo = id => ({\r\n    type: TOGGLE_TODO,\r\n    id\r\n})\r\n\r\n/**\r\n * setFilter\r\n * @param {*} filter \r\n */\r\nexport const setFilter = filter => ({\r\n    type: SET_FILTER,\r\n    filter\r\n})\r\n\r\n/**\r\n * setTodoText\r\n * @param {*} text \r\n */\r\nexport const setTodoText = text => ({\r\n    type: SET_TODO_TEXT,\r\n    text\r\n})","import React, { Component } from 'react';\r\nimport { Container, Box, Button } from '@material-ui/core'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport { blue } from '@material-ui/core/colors';\r\n\r\nclass AddTodo extends Component {\r\n// const AddTodo = () => {\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         text: '',\r\n    //     }\r\n    // }\r\n\r\n    // render() {\r\n    //     return (\r\n    //         <div>\r\n    //             <input value={this.state.text} \r\n    //                 onChange={this.handleChange} \r\n    //                 />\r\n    //             <button \r\n    //                 onClick={this.handleClick}\r\n    //                 >Add</button>\r\n    //         </div>\r\n    //     );\r\n    // }\r\n\r\n    // handleChange = (e) => {\r\n    //     this.setState({\r\n    //         text: e.target.value,\r\n    //     })\r\n    // }\r\n\r\n    // handleClick = () => {\r\n    //     this.props.addTodo(this.state.text);\r\n    //     this.setState({\r\n    //         text: '',\r\n    //     })\r\n    // }\r\n    // const classes = useStyles();\r\n    render() {\r\n        return (\r\n            <Container>\r\n            <Box display=\"flex\" \r\n            alignItems=\"center\" \r\n            justifyContent=\"center\">\r\n                <TextField\r\n                    id=\"outlined-textarea\"\r\n                    label=\"ENTER NEXT ITEM HERE\"\r\n                    placeholder='Press \"Enter\" to enable multi-line input'\r\n                    multiline\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    value={this.props.text}\r\n                    onChange={this.handleChange}\r\n                />\r\n                {/* <input value={this.props.text} onChange={this.handleChange} /> */}\r\n                {/* <button \r\n                    onClick={this.handleClick}\r\n                    >Add</button> */}\r\n                <Button \r\n                    onClick={this.handleClick}\r\n                    startIcon={<AddBoxIcon />}\r\n                    color=\"primary\"\r\n                    >\r\n                        Add\r\n                </Button>\r\n            </Box>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.props.setTodoText(e.target.value)\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.props.addTodo(this.props.text)\r\n        this.props.setTodoText(\"\") // clear the content after input\r\n    }\r\n}\r\n\r\nexport default AddTodo;","// used in AddTodoContainer\r\nexport const getText = (state) => state.text\r\n\r\n// used in TodoListContainer / Footer Container\r\nexport const getFilter = (state) => state.filter\r\n\r\n// used in TodoListContainer\r\nexport const getVisibleTodos = (state) => {\r\n    const { todos: {data}, filter } = state\r\n    switch (filter) {\r\n        case 'all':\r\n            return data\r\n        case 'completed':\r\n            return data.filter(t => t.completed)\r\n        case 'active':\r\n            return data.filter(t => !t.completed)\r\n        default:\r\n            return new Error('Unknown filter: ' + filter)\r\n    }\r\n}","import { connect } from 'react-redux'\r\nimport { setTodoText, addTodo } from '../actions'\r\nimport AddTodo from '../component/AddTodo'\r\nimport { getText } from \"../selectors\"\r\n\r\nconst mapStateToProps = state => ({\r\n    // text: state.text\r\n    text: getText(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setTodoText: text => dispatch (setTodoText(text)),\r\n    addTodo: text => dispatch(addTodo(text))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddTodo)","import React, { Component } from 'react';\r\nimport { CardContent } from '@material-ui/core';\r\n\r\nclass Todo extends Component {\r\n    render() {\r\n        const {completed, text, onClick } = this.props;\r\n        return (\r\n            <CardContent>\r\n            <li\r\n                onClick={onClick}\r\n                style={{\r\n                    textDecoration: completed ? \"line-through\" : \"none\"\r\n            }}\r\n            >\r\n                {text}\r\n            </li>\r\n            </CardContent>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport Todo from \"./Todo\";\r\nimport { CardContent } from '@material-ui/core'\r\n\r\nclass TodoList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchTodos();\r\n    }\r\n\r\n    render() {\r\n        const {todos, toggleTodo} = this.props;\r\n        return (\r\n            <CardContent>\r\n            <ul>\r\n                {\r\n                    todos.map(todo => {\r\n                    // return <li> {todo.text} </li>\r\n                    return <Todo key={todo.id} {...todo} \r\n                        onClick={() => {toggleTodo(todo.id)}} />\r\n                    })\r\n                }\r\n            </ul>\r\n            </CardContent>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;","import { connect } from 'react-redux'\r\nimport TodoList from '../component/TodoList'\r\nimport { toggleTodo, fetchTodos } from '../actions'\r\nimport { getVisibleTodos } from \"../selectors\"\r\n\r\n// const getVisibleTodos = (todos, filter) => {\r\n//     switch (filter) {\r\n//         case 'all':\r\n//             return todos\r\n//         case 'completed':\r\n//             return todos.filter(t => t.completed)\r\n//         case 'active':\r\n//             return todos.filter(t => !t.completed)\r\n//         default:\r\n//             return new Error('Unknown filter: ' + filter)\r\n//     }\r\n// }\r\n\r\nconst mapStateToProps = (state) => ({\r\n    // todos: getVisibleTodos(state.todos.data, state.filter)\r\n    todos: getVisibleTodos(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleTodo: id => dispatch(toggleTodo(id)),\r\n    fetchTodos: () => dispatch(fetchTodos())\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TodoList);","import React, { Component } from 'react';\r\nimport { Container, Box, Button } from '@material-ui/core'\r\n// import filter from \"../App\";\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        const { filter, setFilter: setVisibilityFilter } = this.props;\r\n        // So here's a smart trick:\r\n        // renamed setVisibilityFilter to setFilter in order to keep the original func name below\r\n        return (\r\n            <Container>\r\n                <Box display=\"flex\" \r\n                    alignItems=\"center\" \r\n                    justifyContent=\"center\">\r\n                    <Button disabled={filter === \"all\"}\r\n                        onClick={\r\n                            () => setVisibilityFilter(\"all\")\r\n                        }\r\n                        color=\"primary\"\r\n                    >\r\n                        All\r\n                    </Button>\r\n                    <Button disabled={filter === \"active\"}\r\n                        onClick={\r\n                            () => setVisibilityFilter(\"active\")\r\n                        }\r\n                        color=\"primary\"\r\n                    >\r\n                        Active\r\n                    </Button>\r\n                    <Button disabled={filter === \"completed\"}\r\n                        onClick={\r\n                            () => setVisibilityFilter(\"completed\")\r\n                        }\r\n                        color=\"primary\"\r\n                    >\r\n                        Completed\r\n                    </Button>\r\n\r\n                    {/* <button disabled={filter === \"all\"}\r\n                        onClick={\r\n                            () => setVisibilityFilter(\"all\")\r\n                        }\r\n                    >All</button>\r\n                    <button disabled={filter === \"active\"}\r\n                        onClick={\r\n                            () => setVisibilityFilter(\"active\")\r\n                        }\r\n                    >Active</button>\r\n                    <button disabled={filter === \"completed\"}\r\n                        onClick={\r\n                            () => setVisibilityFilter(\"completed\")\r\n                        }\r\n                    >Completed</button> */}\r\n                </Box>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import { connect } from 'react-redux'\r\nimport { setFilter } from '../actions'\r\nimport Footer from '../component/Footer'\r\nimport { getFilter } from \"../selectors\"\r\n\r\nconst mapStateToProps = state => ({\r\n    // filter: state.filter\r\n    filter: getFilter(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setFilter: filter  => dispatch (setFilter(filter))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Footer)","import { createMuiTheme } from '@material-ui/core/styles'\r\nimport { blue, red, indigo, pink, orange, green } from '@material-ui/core/colors'\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        fontFamily: \"Arial\",\r\n        card: {\r\n            fontSize: 20,\r\n            fontWeight: 1000,\r\n        },\r\n        button: {\r\n            fontSize: 18,\r\n            fontWeight: 600,\r\n        }\r\n    },\r\n    palette: {\r\n        primary: {\r\n            main: blue[800],\r\n        },\r\n        secondary: pink,\r\n        error: {\r\n            main: red[300],\r\n        },\r\n        warning: orange,\r\n        success: green,\r\n        background: {\r\n            default: indigo[50],\r\n        },\r\n    },\r\n\r\n    // spreadThis: {\r\n    //     customError: {\r\n    //         color: \"red\",\r\n    //         fontSize: \"0.8rem\",\r\n    //         marginTop: 5\r\n    //     },\r\n    // }\r\n})\r\n\r\nexport default theme;","import React, { Component } from 'react'\r\n// import AddTodo from \"./component/AddTodo\";\r\n// import TodoList from \"./component/TodoList\";\r\n// import Footer from \"./component/Footer\";\r\nimport AddTodoContainer from '../containers/AddTodoContainer'\r\nimport TodoListContainer from '../containers/TodoListContainer'\r\nimport FooterContainer from '../containers/FooterContainer'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Container, MuiThemeProvider, Box, Card, CardContent, Typography } from '@material-ui/core'\r\nimport { ThemeProvider } from '@material-ui/styles'\r\nimport Favorite from '@material-ui/icons/Favorite'\r\nimport red from '@material-ui/core/colors/red'\r\nimport { blue } from '@material-ui/core/colors'\r\nimport theme from '../theme'\r\n\r\n// const todos = [\r\n//     {\r\n//         id: 1,\r\n//         text: \"Walk the dogs\",\r\n//         completed: true\r\n//     },\r\n//     {\r\n//         id: 2,\r\n//         text: \"Buy grocery\",\r\n//         completed: false\r\n//     },\r\n//     {\r\n//         id: 3,\r\n//         text: \"Cook dinner\",\r\n//         completed: true\r\n//     },\r\n// ]\r\n\r\n// const filter = \"all\";\r\n\r\nconst useStyles = makeStyles( () => ({\r\n    card: {\r\n        marginTop: 40,\r\n        // borderRadius: spacing(0.5),\r\n        transition: '0.3s',\r\n        width: '90%',\r\n        overflow: 'initial',\r\n        background: '#ffffff',\r\n    },\r\n    title: {\r\n        fontSize: 25,\r\n        fontWeight: 800,\r\n        textAlign: 'center',\r\n        color: blue.A200,\r\n        // fontFamily: \"'Arial', sans-serif\",\r\n    },\r\n    content: {\r\n        textAlign: 'center',\r\n        overflowX: 'auto',\r\n    },\r\n    button: {\r\n        textAligh: 'center',\r\n    }\r\n}));\r\n\r\n\r\n\r\nconst App = () => {\r\n// class App extends Component {\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         todos: [],\r\n    //         filter: 'all'\r\n    //     }\r\n    //     this.nextTodoId = 0;\r\n    // }\r\n\r\n    // render() {\r\n        // const todos = this.getVisibleTodos();\r\n        // const {filter} = this.props;\r\n        // const classes = useStyles();\r\n        // const cardHeaderStyles = \r\n        return (\r\n            // <ThemeProvider theme={theme}>\r\n            <Container> {/**material-ui container */}\r\n\r\n            <Box display=\"flex\"\r\n                 alignItems=\"center\"\r\n                 justifyContent=\"center\"\r\n                 >\r\n                <Card>\r\n                {/* <Card className={classes.card}> */}\r\n                    {/* <CardContent className={classes.title}> */}\r\n                    <CardContent>\r\n                        <Typography color=\"primary\">\r\n                            MY TODO LIST\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <Box display=\"flex\" \r\n                    alignItems=\"center\" \r\n                    justifyContent=\"center\"\r\n                    >\r\n\r\n                        <AddTodoContainer />\r\n\r\n                    </Box>\r\n                    <Box display=\"flex\" \r\n                    alignItems=\"center\" \r\n                    justifyContent=\"center\" \r\n                    >\r\n                        <Typography>\r\n                            <CardContent>\r\n\r\n                                <TodoListContainer />\r\n\r\n                            </CardContent>\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box display=\"flex\" \r\n                    alignItems=\"center\" \r\n                    justifyContent=\"center\" \r\n                    >\r\n\r\n                        <FooterContainer />\r\n\r\n                    </Box>\r\n                    {/* <AddTodo addTodo={this.addTodo} />\r\n                    <TodoList todos={todos} toggleTodo={this.toggleTodo} />\r\n                    <Footer filter={filter} setVisibilityFilter={this.setVisibilityFilter} /> */}\r\n                    <Box  display=\"flex\" \r\n                    alignItems=\"center\" \r\n                    justifyContent=\"right\" \r\n                    >\r\n                        <CardContent>\r\n                            Made by Wendy with \r\n                            <Favorite\r\n                                style={{ color: red.A400 }}\r\n                            ></Favorite>\r\n                        </CardContent>\r\n                    </Box>\r\n                </Card>\r\n            </Box>\r\n            \r\n            </Container>\r\n            // </ThemeProvider>\r\n        );\r\n    // }\r\n\r\n    // // filter todos according to conditions given\r\n    // getVisibleTodos = () => {\r\n    //     const currentFilter = this.state.filter;\r\n    //     return this.state.todos.filter(item => {\r\n    //         if (currentFilter === \"active\") {\r\n    //             return !item.completed;\r\n    //         } else if (currentFilter === \"completed\") {\r\n    //             return item.completed;\r\n    //         } else {\r\n    //             return true;\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    // // add a new todo element\r\n    // addTodo = (text) => {\r\n    //     const todo = {\r\n    //         id: this.nextTodoId++,\r\n    //         text,\r\n    //         complete: false\r\n    //     };\r\n    //     const newTodos = [todo, ...this.state.todos];\r\n    //     this.setState ({\r\n    //         todos: newTodos\r\n    //     });\r\n    // }\r\n\r\n    // // update todo\r\n    // toggleTodo = id => {\r\n    //     const newTodos = this.state.todos.map(item => {\r\n    //         return item.id === id \r\n    //             ? {...item, completed : !item.completed } \r\n    //             : item\r\n    //     });\r\n    //     this.setState ({\r\n    //         todos: newTodos\r\n    //     })\r\n    // }\r\n\r\n    // setVisibilityFilter = filter => {\r\n    //     this.setState({\r\n    //         filter\r\n    //     })\r\n    // }\r\n}\r\n\r\nexport default App;","/**\r\n * print action and state\r\n */\r\nconst logger = ({ getState, dispatch }) => next => action => {\r\n    console.group(action.type); //分组\r\n    console.log(\"dispatching: \", action);\r\n    const result = next(action);\r\n    console.log(\"next state: \", getState());\r\n    console.groupEnd();\r\n    return result;\r\n}\r\n\r\nexport default logger;","// args = reducer & initialState & ...\r\n\r\nconst logger = createStore => (...args) => { \r\n    const store = createStore(...args);\r\n    const dispatch = (action) => {\r\n        console.group(action.type); //categorize by action.type\r\n        console.log(\"dispatching: \", action);\r\n        const result = store.dispatch(action);\r\n        console.log(\"next state: \", store.getState());\r\n        return result;\r\n    }\r\n    return {...store, dispatch}\r\n}\r\n\r\nexport default logger;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, compose } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport rootReducer from './reducers'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport App from './component/App'\r\nimport loggerMiddleware from './middlewares/logger'\r\nimport loggerEnhancer from \"./enhancers/logger\"\r\nimport { MuiThemeProvider } from '@material-ui/core'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport theme from './theme'\r\n// import * as serviceWorker from './serviceWorker';\r\n// import store from './store'\r\n// import './index.css';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, \r\n    composeEnhancers(\r\n        applyMiddleware(thunkMiddleware, loggerMiddleware),\r\n        loggerEnhancer\r\n        ));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <MuiThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <App />\r\n        </MuiThemeProvider>\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}